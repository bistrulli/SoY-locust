version: '3.7' # Supporto Swarm

services:
  node:
    #image: gitlab.polytech.umontpellier.fr:5050/dream-team/plage/soy-v4/nodedock
    image:  gitlab.polytech.umontpellier.fr:5050/dream-team/plage/soy-v4/nodedock@sha256:37862376bcb83795f8f3cce5dfd6f2fc59c1e3c5863f555073773edad5cae2ed
    ports:
      - 5001:5001
    restart: always
    env_file:
      - ./monotlith-v4/variables.env
    networks:
      - monitoring
    # healthcheck:
    #   test: ["CMD", "curl", "-X", "OPTIONS", "-f", "http://localhost:5001/api/exercise-production"]
    #   interval: 5s
    #   timeout: 3s
    #   retries: 3
    #   start_period: 15s
    deploy:
      replicas: 4 # Numero iniziale di repliche
      update_config:
        parallelism: 1
        delay: 30s
      restart_policy:
        condition: none
      resources:
        limits:
          cpus: "1" # Limita le risorse
          memory: 2G
        reservations:
          cpus: "1"
          memory: 512M

  postgres:
    image: icws24submission/postgres_monolith:latest
    shm_size: 1g
    container_name: postgres
    restart: always
    env_file:
      - ./monotlith-v4/variables.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - monitoring
    deploy:
      replicas: 1 # Di solito i database non vengono scalati su Swarm
      restart_policy:
        condition: none
      resources:
        limits:
          cpus: "3"
          memory: 2G
        reservations:
          cpus: "3"
          memory: 2G

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--web.listen-address=:9100'
    networks:
      - monitoring
    ports:
      - "9100:9100"
    deploy:
      mode: global
      restart_policy:
        condition: any
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.1"
          memory: 128M

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ../prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - monitoring
    ports:
      - "9090:9090"
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - monitoring
    ports:
      - "8080:8080"
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.1"
          memory: 128M

networks:
  monitoring:
    driver: overlay
    attachable: true

volumes:
  postgres_data:
  prometheus_data:
